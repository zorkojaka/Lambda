#include "ros/ros.h"

#include <nav_msgs/GetMap.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/PoseStamped.h>
#include <tf/transform_datatypes.h>
#include <tf/transform_listener.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <visualization_msgs/Marker.h>
#include <time.h>


ros::Publisher marker_pub;
ros::Subscriber red_sub;
ros::Subscriber grn_sub;
ros::Subscriber blu_sub;


visualization_msgs::Marker redMarker;
bool redFound=false;

void redCallback(const visualization_msgs::Marker marker){
	if(redFound==true) return;
	redMarker=marker;
	redFound=true;
	marker_pub.publish(marker);
}
int main(int argc, char** argv) {
	
	ros::init(argc, argv, "mark_on_map");
    ros::NodeHandle n;
    
    red_sub = n.subscribe("/exercise6/find_red", &redCallback);
	marker_pub = n.advertise<visualization_msgs::Marker> ("points", 1);
    
    
    while(ros::ok()) {
		ros::spinOnce();
		
	}
	
    return 0;
 }
